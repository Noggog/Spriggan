// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND

using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;

public class IArmorGetter_Converter : JsonConverter<IArmorGetter>
{
    public override IArmorGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, IArmorGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);

        // AlternateBlockMaterial
        writer.WritePropertyName("AlternateBlockMaterial");
        if (value.AlternateBlockMaterial.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.AlternateBlockMaterial.FormKey.ModKey.Name + ":" +
                                    value.AlternateBlockMaterial.FormKey.ModKey.Type + ":" +
                                    value.AlternateBlockMaterial.FormKey.ID.ToString("x8"));

        // Armature
        writer.WritePropertyName("Armature");
        if (value.Armature != null)
        {
            writer.WriteStartArray();
            foreach (var itm1 in value.Armature) writer.WriteStringValue(itm1.FormKey.ToString());
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }

        // ArmorRating
        writer.WritePropertyName("ArmorRating");
        writer.WriteNumberValue(value.ArmorRating);

        // BashImpactDataSet
        writer.WritePropertyName("BashImpactDataSet");
        if (value.BashImpactDataSet.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.BashImpactDataSet.FormKey.ModKey.Name + ":" +
                                    value.BashImpactDataSet.FormKey.ModKey.Type + ":" +
                                    value.BashImpactDataSet.FormKey.ID.ToString("x8"));

        // BodyTemplate
        writer.WritePropertyName("BodyTemplate");
        if (value.BodyTemplate != null)
        {
            writer.WriteStartObject();

            // FirstPersonFlags
            writer.WritePropertyName("FirstPersonFlags");
            writer.WriteFlags(value.BodyTemplate.FirstPersonFlags);

            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.BodyTemplate.Flags);

            // ArmorType
            writer.WritePropertyName("ArmorType");
            writer.WriteEnum(value.BodyTemplate.ArmorType);

            // ActsLike44
            writer.WritePropertyName("ActsLike44");
            writer.WriteBooleanValue(value.BodyTemplate.ActsLike44);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }

        // DATADataTypeState
        writer.WritePropertyName("DATADataTypeState");
        writer.WriteFlags(value.DATADataTypeState);

        // Description
        writer.WritePropertyName("Description");
        writer.WriteTranslatedString(value.Description, options);

        // Destructible
        writer.WritePropertyName("Destructible");
        if (value.Destructible != null)
        {
            writer.WriteStartObject();

            // Data
            writer.WritePropertyName("Data");
            if (value.Destructible.Data != null)
            {
                writer.WriteStartObject();

                // Health
                writer.WritePropertyName("Health");
                writer.WriteNumberValue(value.Destructible.Data.Health);

                // DESTCount
                writer.WritePropertyName("DESTCount");
                writer.WriteNumberValue(value.Destructible.Data.DESTCount);

                // VATSTargetable
                writer.WritePropertyName("VATSTargetable");
                writer.WriteBooleanValue(value.Destructible.Data.VATSTargetable);

                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteNumberValue(value.Destructible.Data.Unknown);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }

            // Stages
            writer.WritePropertyName("Stages");
            if (value.Destructible.Stages != null)
            {
                writer.WriteStartArray();
                foreach (var itm2 in value.Destructible.Stages)
                    if (itm2 != null)
                    {
                        writer.WriteStartObject();

                        // Data
                        writer.WritePropertyName("Data");
                        if (itm2.Data != null)
                        {
                            writer.WriteStartObject();

                            // HealthPercent
                            writer.WritePropertyName("HealthPercent");
                            writer.WriteNumberValue(itm2.Data.HealthPercent);

                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue(itm2.Data.Index);

                            // ModelDamageStage
                            writer.WritePropertyName("ModelDamageStage");
                            writer.WriteNumberValue(itm2.Data.ModelDamageStage);

                            // Flags
                            writer.WritePropertyName("Flags");
                            writer.WriteEnum(itm2.Data.Flags);

                            // SelfDamagePerSecond
                            writer.WritePropertyName("SelfDamagePerSecond");
                            writer.WriteNumberValue(itm2.Data.SelfDamagePerSecond);

                            // Explosion
                            writer.WritePropertyName("Explosion");
                            writer.WriteStringValue(itm2.Data.Explosion.FormKey.ToString());

                            // Debris
                            writer.WritePropertyName("Debris");
                            writer.WriteStringValue(itm2.Data.Debris.FormKey.ToString());

                            // DebrisCount
                            writer.WritePropertyName("DebrisCount");
                            writer.WriteNumberValue(itm2.Data.DebrisCount);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }

                        // Model
                        writer.WritePropertyName("Model");
                        if (itm2.Model != null)
                        {
                            writer.WriteStartObject();

                            // AlternateTextures
                            writer.WritePropertyName("AlternateTextures");
                            if (itm2.Model.AlternateTextures != null)
                            {
                                writer.WriteStartArray();
                                foreach (var itm3 in itm2.Model.AlternateTextures)
                                    if (itm3 != null)
                                    {
                                        writer.WriteStartObject();

                                        // Name
                                        writer.WritePropertyName("Name");
                                        writer.WriteStringValue(itm3.Name);

                                        // NewTexture
                                        writer.WritePropertyName("NewTexture");
                                        writer.WriteStringValue(itm3.NewTexture.FormKey.ToString());

                                        // Index
                                        writer.WritePropertyName("Index");
                                        writer.WriteNumberValue(itm3.Index);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }

                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }

                            // File
                            writer.WritePropertyName("File");
                            writer.WriteStringValue(itm2.Model.File);

                            // Data
                            writer.WritePropertyName("Data");
                            if (itm2.Model.Data == null)
                                writer.WriteNullValue();
                            else
                                writer.WriteBase64StringValue(itm2.Model.Data.Value);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }

                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }

                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }

            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }

        writer.WriteEndObject();
    }
}

public class Armor_Converter : JsonConverter<Armor>
{
    private readonly IArmorGetter_Converter _getterConverter;

    public Armor_Converter()
    {
        _getterConverter = new IArmorGetter_Converter();
    }

    public override void Write(Utf8JsonWriter writer, Armor value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, value, options);
    }

    public override Armor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        var retval = new Armor(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }

            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AlternateBlockMaterial":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.AlternateBlockMaterial.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Armature":
                    if (reader.TokenType != null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Armature.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }

                    break;
                case "ArmorRating":
                    retval.ArmorRating = reader.GetSingle();
                    break;
                case "BashImpactDataSet":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.BashImpactDataSet.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "BodyTemplate":
                    retval.BodyTemplate = new BodyTemplate();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop4 = reader.GetString();
                            reader.Read();
                            switch (prop4)
                            {
                                case "FirstPersonFlags":
                                    retval.BodyTemplate.FirstPersonFlags =
                                        SerializerExtensions.ReadFlags<BipedObjectFlag>(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.BodyTemplate.Flags =
                                        SerializerExtensions.ReadFlags<BodyTemplate.Flag>(ref reader, options);
                                    break;
                                case "ArmorType":
                                    retval.BodyTemplate.ArmorType =
                                        SerializerExtensions.ReadEnum<ArmorType>(ref reader, options);
                                    break;
                                case "ActsLike44":
                                    retval.BodyTemplate.ActsLike44 = reader.GetBoolean();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }

                    break;
                case "DATADataTypeState":
                    retval.DATADataTypeState = SerializerExtensions.ReadFlags<Armor.DATADataType>(ref reader, options);
                    break;
                case "Description":
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Description, options);
                    break;
                case "Destructible":
                    retval.Destructible = new Destructible();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop5 = reader.GetString();
                            reader.Read();
                            switch (prop5)
                            {
                                case "Data":
                                    retval.Destructible.Data = new DestructableData();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop6 = reader.GetString();
                                            reader.Read();
                                            switch (prop6)
                                            {
                                                case "Health":
                                                    retval.Destructible.Data.Health = reader.GetInt32();
                                                    break;
                                                case "DESTCount":
                                                    retval.Destructible.Data.DESTCount = reader.GetByte();
                                                    break;
                                                case "VATSTargetable":
                                                    retval.Destructible.Data.VATSTargetable = reader.GetBoolean();
                                                    break;
                                                case "Unknown":
                                                    retval.Destructible.Data.Unknown = reader.GetInt16();
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }

                                    break;
                                case "Stages":
                                    if (reader.TokenType != null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            var itm7 = new DestructionStage();
                                            itm7 = new DestructionStage();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop8 = reader.GetString();
                                                    reader.Read();
                                                    switch (prop8)
                                                    {
                                                        case "Data":
                                                            itm7.Data = new DestructionStageData();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop9 = reader.GetString();
                                                                    reader.Read();
                                                                    switch (prop9)
                                                                    {
                                                                        case "HealthPercent":
                                                                            itm7.Data.HealthPercent = reader.GetByte();
                                                                            break;
                                                                        case "Index":
                                                                            itm7.Data.Index = reader.GetByte();
                                                                            break;
                                                                        case "ModelDamageStage":
                                                                            itm7.Data.ModelDamageStage =
                                                                                reader.GetByte();
                                                                            break;
                                                                        case "Flags":
                                                                            itm7.Data.Flags =
                                                                                SerializerExtensions
                                                                                    .ReadEnum<
                                                                                        DestructionStageData.Flag>(
                                                                                        ref reader, options);
                                                                            break;
                                                                        case "SelfDamagePerSecond":
                                                                            itm7.Data.SelfDamagePerSecond =
                                                                                reader.GetInt32();
                                                                            break;
                                                                        case "Explosion":
                                                                            itm7.Data.Explosion.SetTo(
                                                                                SerializerExtensions.ReadFormKeyValue(
                                                                                    ref reader, options));
                                                                            break;
                                                                        case "Debris":
                                                                            itm7.Data.Debris.SetTo(
                                                                                SerializerExtensions.ReadFormKeyValue(
                                                                                    ref reader, options));
                                                                            break;
                                                                        case "DebrisCount":
                                                                            itm7.Data.DebrisCount = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }

                                                            break;
                                                        case "Model":
                                                            itm7.Model = new Model();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop10 = reader.GetString();
                                                                    reader.Read();
                                                                    switch (prop10)
                                                                    {
                                                                        case "AlternateTextures":
                                                                            if (reader.TokenType != null)
                                                                            {
                                                                                if (reader.TokenType !=
                                                                                 JsonTokenType.StartArray)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType ==
                                                                                     JsonTokenType.EndArray)
                                                                                        break;
                                                                                    var itm11 = new AlternateTexture();
                                                                                    itm11 = new AlternateTexture();
                                                                                    if (reader.TokenType !=
                                                                                     JsonTokenType.Null)
                                                                                    {
                                                                                        if (reader.TokenType !=
                                                                                         JsonTokenType.StartObject)
                                                                                            throw new JsonException();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType ==
                                                                                             JsonTokenType
                                                                                                 .EndObject)
                                                                                                break;
                                                                                            var prop12 =
                                                                                                reader.GetString();
                                                                                            reader.Read();
                                                                                            switch (prop12)
                                                                                            {
                                                                                                case "Name":
                                                                                                    itm11.Name =
                                                                                                        reader
                                                                                                            .GetString();
                                                                                                    break;
                                                                                                case "NewTexture":
                                                                                                    itm11.NewTexture
                                                                                                        .SetTo(
                                                                                                            SerializerExtensions
                                                                                                                .ReadFormKeyValue(
                                                                                                                    ref
                                                                                                                    reader,
                                                                                                                    options));
                                                                                                    break;
                                                                                                case "Index":
                                                                                                    itm11.Index =
                                                                                                        reader
                                                                                                            .GetInt32();
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        reader.Skip();
                                                                                    }

                                                                                    itm7.Model.AlternateTextures.Add(
                                                                                        itm11);
                                                                                }
                                                                            }

                                                                            break;
                                                                        case "File":
                                                                            itm7.Model.File = reader.GetString();
                                                                            break;
                                                                        case "Data":
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                itm7.Model.Data =
                                                                                    reader.GetBytesFromBase64();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }

                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }

                                            retval.Destructible.Stages.Add(itm7);
                                        }
                                    }

                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }

                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return retval;
    }
}

public static class GeneratedConvertersExtensions
{
    public static IServiceCollection UseConverters(this IServiceCollection services)
    {
        services.AddSingleton<JsonConverter, IArmorGetter_Converter>();
        services.AddSingleton<JsonConverter, Armor_Converter>();
        return services;
    }
}