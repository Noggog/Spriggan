using System.Reactive.Disposables;
using System.Reflection;
using System.Text.Json;
using Loqui;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using Spriggan.TupleGen;

namespace Spriggan.ConverterGenerators;

using System.IO;
using System.Text;

public class CFile
{
    private readonly StringBuilder _sb;
    private int _indent;


    private Dictionary<Type, Action<Type, string>> _emitters;

    public CFile()
    {
        _emitters = new()
        {
            {typeof(IFormLinkNullableGetter<>), IFormLinkNullableWriter},
            {typeof(IFormLinkGetter<>), IFormLinkWriter},
            {typeof(IReadOnlyList<>), IReadOnlyListWriter},
            {typeof(float), PrimitiveWriter<float>},
            {typeof(bool), PrimitiveWriter<bool>},
            {typeof(ILoquiObject), LoquiObjectWriter},
            {typeof(Enum), EnumWriter},
        };

        
        _sb = new StringBuilder();
        Code("// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND");
        Code("using System;");
        Code("using System.Text.Json;");
        Code("using System.Text.Json.Serialization;");
        Code("using System.Drawing;");
        Code("using Mutagen.Bethesda.Skyrim;");
        Code("using Spriggan.Converters.Base;");
        Code("using Microsoft.Extensions.DependencyInjection;");
        Code("");
    }

    public void Write(string path)
    {
        File.WriteAllText(path, _sb.ToString());
    }

    public void Code(string c)
    {
        if (c.EndsWith("}"))
            _indent--;

        for (var i = 0; i < _indent; i++) _sb.Append("  ");
        _sb.AppendLine(c);

        if (c.EndsWith("{"))
            _indent++;
    }

    public IDisposable WithIndent()
    {
        _indent++;
        return Disposable.Create(() => _indent--);
    }

    public void EmitTypeHeader(Type tGetter, string baseName)
    {
        Code(
            $"writer.WriteString(\"FormKey\", value.FormKey.ModKey.FileName + \":\" + value.FormKey.ID.ToString(\"x8\") + \":{baseName}\");");
    }


    private void IFormLinkNullableWriter(Type info, string getter)
    {
        Code($"if ({getter}.IsNull)");
        
        using (var _ = WithIndent()) 
            Code("writer.WriteNullValue();");

        Code("else");
        
        using (var _ = WithIndent()) 
            Code($"writer.WriteStringValue({getter}.FormKey.ModKey.FileName + \":\" + {getter}.FormKey.ID.ToString(\"x8\"));");
    }
    
    private void IFormLinkWriter(Type info, string getter)
    {
        Code($"writer.WriteStringValue({getter}.FormKey.ModKey.FileName + \":\" + {getter}.FormKey.ID.ToString(\"x8\"));");
    }

    private void LoquiObjectWriter(Type info, string getter)
    {
        Code("writer.WriteStartObject();");
        foreach (var p in VisitorGenerator.Members(info))
        {
            Code("");
            Code($"// {p.Name}");
            Code($"writer.WritePropertyName(\"{p.Name}\");");
            EmitWriter(p.PropertyType, getter + "." + p.Name);
        }
        Code("writer.WriteEndObject();");
    }
    
    private void PrimitiveWriter<T>(Type info, string getter)
    {
        if (typeof(T) == typeof(float))
        {
            Code($"writer.WriteNumberValue({getter});");
        }
        else if (typeof(T) == typeof(bool))
        {
            Code($"writer.WriteBooleanValue({getter});");
        }
        else
        {
            throw new NotImplementedException($"No writer for {info.Name}");
        }
    }

    private void EnumWriter(Type info, string getter)
    {
        Code($"writer.WriteEnum({getter});");
    }

    private void IReadOnlyListWriter(Type info, string getter)
    {
        var itype = info.GetGenericArguments()[0];
        Code("writer.WriteStartArray();");
        Code($"foreach(var itm in {getter})");
        Code("{");
        EmitWriter(itype, "itm");
        Code("}");
        Code("writer.WriteEndArray();");

    }

    public void EmitWriter(Type type, string getter)
    {
        
        var (_, emitter) = _emitters.FirstOrDefault(e => type.InheritsFrom(e.Key));

        
        if (emitter == null)
            throw new Exception($"No emitter for property of type {type.FullName}");
        emitter(type, getter);
    }

}