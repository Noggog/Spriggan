using System.Reactive.Disposables;
using System.Reflection;
using System.Text.Json;
using Loqui;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Strings;
using Noggog;
using Spriggan.TupleGen;

namespace Spriggan.ConverterGenerators;

using System.IO;
using System.Text;

public class CFile
{
    private readonly StringBuilder _sb;
    private int _indent;


    private Dictionary<Type, Action<Type, string>> _writerEmitters;
    private Dictionary<Type, Action<Type, string>> _readerEmitters;
    private readonly GameRelease _game;
    private int genSym = 0;


    public CFile(GameRelease game)
    {
        _game = game;
        _writerEmitters = new()
        {
            {typeof(IFormLinkNullableGetter<>), IFormLinkNullableWriter},
            {typeof(IFormLinkGetter<>), IFormLinkWriter},
            {typeof(IReadOnlyList<>), IReadOnlyListWriter},
            {typeof(float), PrimitiveWriter<float>},
            {typeof(int), PrimitiveWriter<int>},
            {typeof(short), PrimitiveWriter<short>},
            {typeof(byte), PrimitiveWriter<byte>},
            {typeof(bool), PrimitiveWriter<bool>},
            {typeof(string), PrimitiveWriter<string>},
            {typeof(ILoquiObject), LoquiObjectWriter},
            {typeof(Enum), EnumWriter},
            {typeof(Nullable<>), NullableWriter},
            {typeof(ReadOnlyMemorySlice<byte>), MemorySliceWriter},
            {typeof(ITranslatedStringGetter), TranslatedStringWriter}
        };

        _readerEmitters = new()
        {
            {typeof(IFormLinkNullable<>), IFormLinkNullableReader},
            {typeof(IFormLink<>), IFormLinkReader},
            {typeof(ExtendedList<>), ExtendedListReader},
            {typeof(float), PrimitiveReader<float>},
            {typeof(int), PrimitiveReader<int>},
            {typeof(short), PrimitiveReader<short>},
            {typeof(byte), PrimitiveReader<byte>},
            {typeof(bool), PrimitiveReader<bool>},
            {typeof(string), PrimitiveReader<string>},
            {typeof(ILoquiObject), LoquiObjectReader},
            {typeof(Enum), EnumReader},
            {typeof(Nullable<>), NullableReader},
            {typeof(MemorySlice<>), MemorySliceReader},
            {typeof(TranslatedString), TranslatedStringReader}

        };

        
        _sb = new StringBuilder();
        Code("// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND");
        Code("using System;");
        Code("using System.Text.Json;");
        Code("using System.Text.Json.Serialization;");
        Code("using System.Drawing;");
        Code("using Mutagen.Bethesda.Skyrim;");
        Code("using Spriggan.Converters.Base;");
        Code("using Mutagen.Bethesda;");
        Code("using Microsoft.Extensions.DependencyInjection;");
        Code("");
    }

    private void MemorySliceReader(Type type, string getter)
    {
        Code($"{getter} = reader.GetBytesFromBase64();");
    }

    private void NullableReader(Type type, string getter)
    {
        Code("if (reader.TokenType != JsonTokenType.Null) {");
        EmitReader(type.GetGenericArguments()[0], getter);
        Code("}");
    }

    private void MemorySliceWriter(Type type, string getter)
    {
        Code($"writer.WriteBase64StringValue({getter}.Value);");
    }

    private void NullableWriter(Type type, string getter)
    {
        var itype = type.GetGenericArguments()[0];
        Code($"if ({getter} == null)");
        using (var _ = WithIndent())
            Code("writer.WriteNullValue();");
        Code("else");
        Code("{");
        EmitWriter(itype, getter);
        Code("}");
    }

    private void TranslatedStringReader(Type type, string getter)
    {
        Code($"SerializerExtensions.ReadTranslatedString(ref reader, {getter}, options);");
    }

    private void TranslatedStringWriter(Type type, string getter)
    {
        Code($"writer.WriteTranslatedString({getter}, options);");
    }


    private string GetProp()
    {
        genSym++;
        return $"prop{genSym}";
    }
    
    private string GetItem()
    {
        genSym++;
        return $"itm{genSym}";
    }

    private void PrimitiveReader<T>(Type type, string getter)
    {
        if (typeof(T) == typeof(float))
        {
            Code($"{getter} = reader.GetSingle();");
        }
        else if (typeof(T) == typeof(int))
        {
            Code($"{getter} = reader.GetInt32();");
        }
        else if (typeof(T) == typeof(short))
        {
            Code($"{getter} = reader.GetInt16();");
        }
        else if (typeof(T) == typeof(byte))
        {
            Code($"{getter} = reader.GetByte();");
        }
        else if (typeof(T) == typeof(bool))
        {
            Code($"{getter} = reader.GetBoolean();");
        }
        else if (typeof(T) == typeof(string))
        {
            Code($"{getter} = reader.GetString();");
        }
        else
        {
            throw new NotImplementedException($"{type}");
        }
    }

    public void Write(string path)
    {
        File.WriteAllText(path, _sb.ToString());
    }

    public void Code(string c)
    {
        if (c.EndsWith("}"))
            _indent--;

        for (var i = 0; i < _indent; i++) _sb.Append("  ");
        _sb.AppendLine(c);

        if (c.EndsWith("{"))
            _indent++;
    }

    public IDisposable WithIndent()
    {
        _indent++;
        return Disposable.Create(() => _indent--);
    }

    public void EmitTypeHeader(Type tGetter, string baseName)
    {
        Code($"writer.WriteFormKeyHeader(value, options);");
    }


    private void IFormLinkNullableWriter(Type info, string getter)
    {
        Code($"if ({getter}.IsNull)");
        
        using (var _ = WithIndent()) 
            Code("writer.WriteNullValue();");

        Code("else");
        
        using (var _ = WithIndent()) 
            Code($"writer.WriteStringValue({getter}.FormKey.ModKey.Name + \":\" + {getter}.FormKey.ModKey.Type + \":\" + {getter}.FormKey.ID.ToString(\"x8\"));");

    }

    private void IFormLinkNullableReader(Type info, string getter)
    {
        Code($"if (reader.TokenType != JsonTokenType.Null)");
        using var _ = WithIndent();
        Code($"{getter}.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));");
    }
    
    private void IFormLinkReader(Type info, string getter)
    {
        Code($"{getter}.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));");
    }
    
    private void IFormLinkWriter(Type info, string getter)
    {
        Code($"writer.WriteStringValue({getter}.FormKey.ToString());");
    }

    private void LoquiObjectWriter(Type info, string getter)
    {
        Code($"if ({getter} != null)");
        Code("{");
        Code("writer.WriteStartObject();");
        foreach (var p in VisitorGenerator.Members(info))
        {
            Code("");
            Code($"// {p.Name}");
            Code($"writer.WritePropertyName(\"{p.Name}\");");
            EmitWriter(p.PropertyType, getter + "." + p.Name);
        }
        Code("writer.WriteEndObject();");
        Code("}");
        Code("else");
        Code("{");
        Code("writer.WriteNullValue();");
        Code("}");
    }


    private void LoquiObjectReader(Type type, string getter)
    {
        EmitCtor(getter, type);
        Code("if (reader.TokenType != JsonTokenType.Null)");
        Code("{");
        Code("if (reader.TokenType != JsonTokenType.StartObject)");
        using (var _ = WithIndent())
            Code("throw new JsonException();");


        Code("while (true)");
        Code("{");
        Code("reader.Read();");
        Code("if (reader.TokenType == JsonTokenType.EndObject)");
        using (var _2 = WithIndent())
            Code("break;");

        var propName = GetProp();
        Code($"var {propName} = reader.GetString();");
        Code("reader.Read();");

        Code($"switch({propName})");
        Code("{");
        foreach (var prop in VisitorGenerator.Members(type))
        {
            Code($"case \"{prop.Name}\":");

            using var _ = WithIndent();
            EmitReader(prop.PropertyType, $"{getter}.{prop.Name}");
            Code("break;");

        }

        Code("}");

        Code("}");

        Code("}");
        Code("else");
        Code("{");
        Code("reader.Skip();");
        Code("}");
}


    private string CleanName(string s)
    {
        return s.Replace("+", ".");
    }
    
    private void PrimitiveWriter<T>(Type info, string getter)
    {
        if (typeof(T) == typeof(float) || typeof(T) == typeof(int) || typeof(T) == typeof(byte) || typeof(T) == typeof(short))
        {
            Code($"writer.WriteNumberValue({getter});");
        }
        else if (typeof(T) == typeof(bool))
        {
            Code($"writer.WriteBooleanValue({getter});");
        }
        else if (typeof(T) == typeof(string))
        {
            Code($"writer.WriteStringValue({getter});");
        }
        else
        {
            throw new NotImplementedException($"No writer for {info.Name}");
        }
    }

    private void EnumWriter(Type info, string getter)
    {
        if (info.CustomAttributes.Any(a => a.AttributeType == typeof(FlagsAttribute)))
            Code($"writer.WriteFlags({getter});");
        else
            Code($"writer.WriteEnum({getter});");
    }
    
    
    private void EnumReader(Type type, string getter)
    {
        if (type.CustomAttributes.Any(a => a.AttributeType == typeof(FlagsAttribute)))
            Code($"{getter} = SerializerExtensions.ReadFlags<{CleanName(type.FullName)}>(ref reader, options);");
        else
            Code($"{getter} = SerializerExtensions.ReadEnum<{CleanName(type.FullName)}>(ref reader, options);");
    }

    private void IReadOnlyListWriter(Type info, string getter)
    {
        Code($"if ({getter} != null)");
        Code("{");
        var itype = info.GetGenericArguments()[0];
        Code("writer.WriteStartArray();");
        var sym = GetItem();
        Code($"foreach(var {sym} in {getter})");
        Code("{");
        EmitWriter(itype, sym);
        Code("}");
        Code("writer.WriteEndArray();");
        Code("}");
        Code("else");
        Code("{");
        Code("writer.WriteNullValue();");
        Code("}");

    }

    private void ExtendedListReader(Type info, string getter)
    {
        var itype = info.GetGenericArguments()[0];

        Code("if (reader.TokenType != null)");
        Code("{");

        Code("if (reader.TokenType != JsonTokenType.StartArray)");
        using (var _ = WithIndent())
            Code("throw new JsonException();");


        Code("while (true)");
        Code("{");
        Code("reader.Read();");
        Code("if (reader.TokenType == JsonTokenType.EndArray)");
        using (var _2 = WithIndent())
            Code("break;");

        if (itype.InheritsFrom(typeof(IFormLinkGetter<>)))
        {
            EmitExtendedListFormLinkGetterReadOne(info, getter);
        }
        else
        {
            EmitExtendedListOtherReadOne(info, itype, getter);
        }


        Code("}");
        Code("}");

}

    private void EmitExtendedListOtherReadOne(Type info, Type itemType, string getter)
    {
        var sym = GetItem();
        EmitCtor(sym, itemType, true);
        EmitReader(itemType, sym);
        Code($"{getter}.Add({sym});");
    }

    private void EmitExtendedListFormLinkGetterReadOne(Type info, string getter)
    {
        Code($"{getter}.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));");
    }

    public void EmitWriter(Type type, string getter)
    {
        
        var (_, emitter) = _writerEmitters.FirstOrDefault(e => type.InheritsFrom(e.Key));

        
        if (emitter == null)
            throw new Exception($"No emitter for property of type {type.FullName}");
        emitter(type, getter);
    }

    public void EmitReader(Type type, string getter)
    {
        var (_, emitter) = _readerEmitters.FirstOrDefault(e => type.InheritsFrom(e.Key));
        if (emitter == null)
            throw new Exception($"No emitter for property of type {type.FullName}");
        emitter(type, getter);
    }

    public void EmitCtor(string retval, Type tMain, bool emitVar = false)
    {
        var prefix = emitVar ? "var " : "";
        if (tMain.InheritsFrom(typeof(IMajorRecord)))
        {
            if (_game == GameRelease.SkyrimLE || _game == GameRelease.SkyrimSE)
            {
                Code(
                    $"{prefix}{retval} = new {tMain.FullName}(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.{_game});");
            }
            else
            {
                throw new NotImplementedException();
            }

            return;
        }

        if (tMain.GetConstructors().Any(t => t.GetParameters().Length == 0))
        {
            Code($"{prefix}{retval} = new {tMain.FullName}();");
            return;
        }

        throw new NotImplementedException();
    }
}